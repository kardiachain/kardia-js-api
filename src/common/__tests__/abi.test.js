import { methodData, deployData, decodeOutput, encodeSingle } from '../lib/abi';
import { toHex } from '../lib/utils';

describe('Encode function', () => {
  it('methodData work correctly', () => {
    const tokenAbi = [
      {
        constant: false,
        inputs: [
          {
            name: 'xy',
            type: 'fixed128x18[2]',
          },
        ],
        name: 'bar',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          {
            name: 'x',
            type: 'uint32',
          },
          {
            name: 'y',
            type: 'bool',
          },
        ],
        name: 'baz',
        outputs: [
          {
            name: 'r',
            type: 'bool',
          },
        ],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          {
            name: 'name',
            type: 'bytes',
          },
          {
            name: 'z',
            type: 'bool',
          },
          {
            name: 'data',
            type: 'uint256[]',
          },
        ],
        name: 'sam',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
    ];
    const result = methodData(tokenAbi[1], [toHex(999999999), toHex(true)]);
    expect(result).toBe(
      '0xcdcd77c0000000000000000000000000000000000000000000000000000000003b9ac9ff0000000000000000000000000000000000000000000000000000000000000001',
    );
    const result2 = methodData(tokenAbi[2], [
      toHex('dave'),
      toHex(true),
      [toHex(1), toHex(2), toHex(3)],
    ]);
    expect(result2).toBe(
      '0xa5643bf20000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000464617665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003',
    );
  });

  it('generate deploy data ok', () => {
    const abi = {
      inputs: [
        {
          name: 'masterContract',
          type: 'address',
        },
      ],
      payable: false,
      stateMutability: 'nonpayable',
      type: 'constructor',
    };
    const bytecode =
      '0x608060405234801561001057600080fd5b506040516020806101ed8339016040526101be8061002f6000396000f3006080604052600436106100565763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663a5643bf2811461005b578063cdcd77c0146100f8578063da818c4a1461012f575b600080fd5b34801561006757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100f694369492936024939284019190819084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b3515159c909b909a95019850929650810194509092508291908501908490808284375094975061016f9650505050505050565b005b34801561010457600080fd5b5061011b63ffffffff600435166024351515610174565b604080519115158252519081900360200190f35b34801561013b57600080fd5b506040805180820182526100f691369160049160449190839060029083908390808284375093965061018f95505050505050565b505050565b600060208363ffffffff1611806101885750815b9392505050565b505600a165627a7a72305820971764edcec4b09e4d0fb80ff3b0d40dfc44437b0f016adc6c50073e19088b4e0029';
    const result = deployData(bytecode, abi, [
      '0x6d872d7517f689df5e3597ae5363bc59fcc78a70',
    ]);
    expect(result).toBe(
      '0x608060405234801561001057600080fd5b506040516020806101ed8339016040526101be8061002f6000396000f3006080604052600436106100565763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663a5643bf2811461005b578063cdcd77c0146100f8578063da818c4a1461012f575b600080fd5b34801561006757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100f694369492936024939284019190819084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b3515159c909b909a95019850929650810194509092508291908501908490808284375094975061016f9650505050505050565b005b34801561010457600080fd5b5061011b63ffffffff600435166024351515610174565b604080519115158252519081900360200190f35b34801561013b57600080fd5b506040805180820182526100f691369160049160449190839060029083908390808284375093965061018f95505050505050565b505050565b600060208363ffffffff1611806101885750815b9392505050565b505600a165627a7a72305820971764edcec4b09e4d0fb80ff3b0d40dfc44437b0f016adc6c50073e19088b4e00290000000000000000000000006d872d7517f689df5e3597ae5363bc59fcc78a70',
    );

    const input = [
      toHex(123),
      toHex(456),
      toHex('thequickbrownfoxjumpsoverthelazydog'),
    ];
    const abi2 = [
      {
        constant: true,
        inputs: [],
        name: 'v3',
        outputs: [
          {
            name: '',
            type: 'string',
          },
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [],
        name: 'v1',
        outputs: [
          {
            name: '',
            type: 'uint256',
          },
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [],
        name: 'v2',
        outputs: [
          {
            name: '',
            type: 'uint256',
          },
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        inputs: [
          {
            name: '_v1',
            type: 'uint256',
          },
          {
            name: '_v2',
            type: 'uint256',
          },
          {
            name: '_v3',
            type: 'string',
          },
        ],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'constructor',
      },
    ];
    const bytecode2 =
      '0x608060405234801561001057600080fd5b506040516102ec3803806102ec83398101604090815281516020808401519284015160008390556001849055909301805191939091610055916002919084019061005e565b505050506100f9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061009f57805160ff19168380011785556100cc565b828001600101855582156100cc579182015b828111156100cc5782518255916020019190600101906100b1565b506100d89291506100dc565b5090565b6100f691905b808211156100d857600081556001016100e2565b90565b6101e4806101086000396000f3006080604052600436106100565763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416636257a38e811461005b5780636854171d146100e5578063f3acae3a1461010c575b600080fd5b34801561006757600080fd5b50610070610121565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100aa578181015183820152602001610092565b50505050905090810190601f1680156100d75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156100f157600080fd5b506100fa6101ac565b60408051918252519081900360200190f35b34801561011857600080fd5b506100fa6101b2565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156101a45780601f10610179576101008083540402835291602001916101a4565b820191906000526020600020905b81548152906001019060200180831161018757829003601f168201915b505050505081565b60005481565b600154815600a165627a7a72305820175a0affe80945273c395ad0a26857b737a9181979c385d9aa3ac0587eea9e530029';
    const result2 = deployData(bytecode2, abi2[3], input);
    expect(result2).toBe(
      '0x608060405234801561001057600080fd5b506040516102ec3803806102ec83398101604090815281516020808401519284015160008390556001849055909301805191939091610055916002919084019061005e565b505050506100f9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061009f57805160ff19168380011785556100cc565b828001600101855582156100cc579182015b828111156100cc5782518255916020019190600101906100b1565b506100d89291506100dc565b5090565b6100f691905b808211156100d857600081556001016100e2565b90565b6101e4806101086000396000f3006080604052600436106100565763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416636257a38e811461005b5780636854171d146100e5578063f3acae3a1461010c575b600080fd5b34801561006757600080fd5b50610070610121565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100aa578181015183820152602001610092565b50505050905090810190601f1680156100d75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156100f157600080fd5b506100fa6101ac565b60408051918252519081900360200190f35b34801561011857600080fd5b506100fa6101b2565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156101a45780601f10610179576101008083540402835291602001916101a4565b820191906000526020600020905b81548152906001019060200180831161018757829003601f168201915b505050505081565b60005481565b600154815600a165627a7a72305820175a0affe80945273c395ad0a26857b737a9181979c385d9aa3ac0587eea9e530029000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000001c800000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000023746865717569636b62726f776e666f786a756d70736f7665727468656c617a79646f670000000000000000000000000000000000000000000000000000000000',
    );
  });
  it('decode output correctly', () => {
    const outputTypes = [
      {
        name: 'name',
        type: 'string',
      },
      {
        name: 'isOpen',
        type: 'bool',
      },
    ];
    const data = ['abc', true];
    expect(decodeOutput(outputTypes, data)).toEqual({
      name: 'abc',
      isOpen: true,
    });
  });
});

describe('test encode single', () => {
  it('encode single correctly', () => {
    const result = encodeSingle(
      'bytes32',
      '0x0000000000000000000000000000000000000000000000000000000031304131',
    );
    console.log(result);
    expect(result).toEqual(
      '0x0000000000000000000000000000000000000000000000000000000031304131',
    );
  });
  it('encode array correctly', () => {
    const result = encodeSingle('bytes32[]', [
      '0x0000000000000000000000000000000000000000000000000000000031304131',
    ]);
    console.log(result);
    expect(result).toEqual(
      '0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000031304131',
    );
  });
});
